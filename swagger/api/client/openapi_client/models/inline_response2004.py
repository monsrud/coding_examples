# coding: utf-8

"""
    Practice API for Learning Swagger

    Practice API for Learning Swagger  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: marshall@theonsruds.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse2004(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device': 'str',
        'space_used': 'int',
        'space_available': 'int',
        'percent_used': 'str'
    }

    attribute_map = {
        'device': 'device',
        'space_used': 'space_used',
        'space_available': 'space_available',
        'percent_used': 'percent_used'
    }

    def __init__(self, device=None, space_used=None, space_available=None, percent_used=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2004 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._device = None
        self._space_used = None
        self._space_available = None
        self._percent_used = None
        self.discriminator = None

        if device is not None:
            self.device = device
        if space_used is not None:
            self.space_used = space_used
        if space_available is not None:
            self.space_available = space_available
        if percent_used is not None:
            self.percent_used = percent_used

    @property
    def device(self):
        """Gets the device of this InlineResponse2004.  # noqa: E501


        :return: The device of this InlineResponse2004.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this InlineResponse2004.


        :param device: The device of this InlineResponse2004.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def space_used(self):
        """Gets the space_used of this InlineResponse2004.  # noqa: E501


        :return: The space_used of this InlineResponse2004.  # noqa: E501
        :rtype: int
        """
        return self._space_used

    @space_used.setter
    def space_used(self, space_used):
        """Sets the space_used of this InlineResponse2004.


        :param space_used: The space_used of this InlineResponse2004.  # noqa: E501
        :type: int
        """

        self._space_used = space_used

    @property
    def space_available(self):
        """Gets the space_available of this InlineResponse2004.  # noqa: E501


        :return: The space_available of this InlineResponse2004.  # noqa: E501
        :rtype: int
        """
        return self._space_available

    @space_available.setter
    def space_available(self, space_available):
        """Sets the space_available of this InlineResponse2004.


        :param space_available: The space_available of this InlineResponse2004.  # noqa: E501
        :type: int
        """

        self._space_available = space_available

    @property
    def percent_used(self):
        """Gets the percent_used of this InlineResponse2004.  # noqa: E501


        :return: The percent_used of this InlineResponse2004.  # noqa: E501
        :rtype: str
        """
        return self._percent_used

    @percent_used.setter
    def percent_used(self, percent_used):
        """Sets the percent_used of this InlineResponse2004.


        :param percent_used: The percent_used of this InlineResponse2004.  # noqa: E501
        :type: str
        """

        self._percent_used = percent_used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2004):
            return True

        return self.to_dict() != other.to_dict()
